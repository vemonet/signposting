[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "signposting"
description = "Parse and navigate FAIR Signposting Link headers."
version = "0.9.2"
requires-python = ">=3.7"
readme = "README.rst"
license = { file = "LICENSE" }
authors = [
    { name = "Stian Soiland-Reyes", email = "stain@apache.org" },
]
maintainers = [
    { name = "Stian Soiland-Reyes", email = "stain@apache.org" },
]
keywords = [
    "FAIR", "signposting", "linked data", "DOI", "HTTP", "linkset"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Web Environment",
    "License :: OSI Approved :: Apache Software License",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Scientific/Engineering",
]

dependencies = [
    "beautifulsoup4 >=4.10",
    "httplink ==0.2.0",
    "rfc3987 >=1.3.8",
    "requests >=2.28.1",
]


[project.optional-dependencies]
test = [
    "pytest",
    "pytest-cov",
    "coverage[toml]",
    "types-requests >=2.28.1",
    "types-beautifulsoup4 >=4.10",
    "requests-mock >=1.9.3",
]
docs = [
    "sphinx >=2.2",
    "sphinx-py3doc-enhanced-theme",
    "sphinx-argparse",
    "CommonMark",
    "mock",
]


[project.scripts]
signposting = "signposting.cli:main"


[project.urls]
Homepage = "https://github.com/stain/signposting"
Documentation = "https://signposting.readthedocs.io/en/latest/"
Changelog = "https://github.com/stain/signposting/blob/main/docs/CHANGELOG.rst"
Tracker = "https://github.com/stain/signposting/issues"
Source = "https://github.com/stain/signposting"
Discussion = "https://github.com/stain/signposting/discussions"



# TOOLS
[tool.hatch.build]
sources = ["src"]


[tool.coverage.paths]
source = ["src", "*/site-packages"]

[tool.coverage.run]
source = ["signposting"]
branch = true
parallel = true

[tool.coverage.report]
show_missing = true
precision = 2
omit = ["*migrations*"]
exclude_lines = ["if __name__ == .__main__.:"]


[tool.pytest.ini_options]
addopts = [
    "-p",
    "pytest_cov",
]
python_files = [
    "test_*.py",
    "*_test.py",
    "test.py",
]
testpaths = ["tests"]


[tool.mypy]
no_implicit_optional = false


# https://github.com/charliermarsh/ruff#supported-rules
[tool.ruff]
src = ["src", "tests"]
target-version = "py38"
line-length = 80
select = [
    "I",     # isort
    "N",     # pep8-naming
    "S",     # bandit
    "A",     # flake8-builtins
    "YTT",   # flake8-2020
    "B",     # flake8-bugbear
    "C",     # flake8-comprehensions
    "ICN",   # flake8-import-conventions
    "SIM",   # flake8-simplify
    "TID",   # flake8-tidy-imports
    # "Q",     # flake8-quotes
    # "FBT",   # flake8-boolean-trap
    "F",     # pyflakes
    "UP",    # pyupgrade
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "PLC",   # pylint convention
    "PLE",   # pylint error
    "PLR",   # pylint refactor
    "PLW",   # pylint warning
    "RUF",   # ruff specific
    "T",
]
ignore = [
    "W293",
    "D412",
    "D105",
    "E501", # line too long
    "PLR0913", "PLR0912", "PLR0915", # Too many branches/statements/arguments to function call
    "PLR2004", # Magic value used in comparison
    "T201", # print found
    "S101", # Use of `assert` detected
    # TODO: Warnings that could be fixed easily:
    "S113", # Probable use of requests call without timeout
    "N802", "N803", "N806", "N815", "N818", # Variable or function should be lowercase
    "B028", # No explicit `stacklevel` keyword argument found
    "A001", "A003", # Variable or class is shadowing a Python builtin
    "E741", # Ambiguous variable name
    "PLE0605", # Invalid format for `__all__`, must be `tuple` or `list`
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["I", "F401"] # module imported but unused
"tests/test_resolver.py" = ["B033"]

[tool.ruff.isort]
known-third-party = ["hypothesis", "pytest"]

[tool.ruff.mccabe]
max-complexity = 19

[tox]
minversion = 3.14.0
ignore_basepython_conflict = true
# these are the environments that will run when you
# execute `tox` in the command-line
# bellow you will find explanations for all environments
envlist =
    build
    type
    docs
    py37
    py38
    py39
    py310
    py311


# helps running tox with github actions
# from: https://github.com/ymyzk/tox-gh-actions
[gh-actions]
python =
    3.7: py37, build, docs, type
    3.8: py38
    3.9: py39
    3.10: py310
    3.11: py311



# configures which environments run with each python version
[testenv]
basepython =
    {py37,docs}: {env:TOXPYTHON:python3.7}
    {py38}: {env:TOXPYTHON:python3.8}
    {py39}: {env:TOXPYTHON:python3.9}
    {py310}: {env:TOXPYTHON:python3.10}
    {py311}: {env:TOXPYTHON:python3.11}
    {build,prreqs,lint,radon,safety,type}: {env:TOXPYTHON:python3}
passenv = *
extras = test


# Ensure static testing is correct before we try doing the tests
[testenv:type]
setenv =
    PYTHONPATH={toxinidir}/tests
    PYTHONUNBUFFERED=yes
    MYPYPATH={toxinidir}/stubs
extras = test
deps =
    mypy
commands = mypy src tests

# configures the unittest environment for python 3.7
[testenv:py37]
setenv =
    PYTHONPATH={toxinidir}/tests
    PYTHONUNBUFFERED=yes
user_develop = false
# installs dependencies we need for testing
# by using tox the developer don't need to manage this dependencies
# him/herself
deps =
    coverage
    pytest
    pytest-cov
    hypothesis
# before running the tests erases any prerecord of coverage
commands_pre =
    coverage erase
# execute pytest
commands =
    pytest --cov --cov-report=term-missing --cov-append --cov-config=.coveragerc -vv --hypothesis-show-statistics {posargs}
# after executing the pytest assembles the coverage reports
commands_post =
    coverage report
    coverage html
    coverage xml

# in previous verions I had independent environments to manage the
# coverage reports. However, I found that doing such as pre and post
# commands facilitates many configuration details

# clones testenev:py37 to py38
[testenv:py38]
setenv = {[testenv:py37]setenv}
user_develop = {[testenv:py37]user_develop}
deps = {[testenv:py37]deps}
commands_pre = {[testenv:py37]commands_pre}
commands = {[testenv:py37]commands}
commands_post = {[testenv:py37]commands_post}

# clones testenev:py37 to py39
[testenv:py39]
setenv = {[testenv:py37]setenv}
user_develop = {[testenv:py37]user_develop}
deps = {[testenv:py37]deps}
commands_pre = {[testenv:py37]commands_pre}
commands = {[testenv:py37]commands}
commands_post = {[testenv:py37]commands_post}

# clones testenev:py37 to py310
[testenv:py310]
setenv = {[testenv:py37]setenv}
user_develop = {[testenv:py37]user_develop}
deps = {[testenv:py37]deps}
commands_pre = {[testenv:py37]commands_pre}
commands = {[testenv:py37]commands}
commands_post = {[testenv:py37]commands_post}

# clones testenev:py37 to py311
[testenv:py311]
setenv = {[testenv:py37]setenv}
user_develop = {[testenv:py37]user_develop}
deps = {[testenv:py37]deps}
commands_pre = {[testenv:py37]commands_pre}
commands = {[testenv:py37]commands}
commands_post = {[testenv:py37]commands_post}


# separates lint from build env
[testenv:lint]
deps = ruff
skip_install = true
commands =
    ruff src tests --fix

# confirms changelog was updated after new code additions
# see .bumpversion.cfg and documentation
# https://signposting.readthedocs.io/en/latest/contributing.html#update-changelog
[testenv:prreqs]
skip_install = true
commands = python {toxinidir}/devtools/check_changelog.py

# asserts package build integrity
[testenv:build]
# setenv here integrates with commit message in .bumpversion.cfg
# we can tests bump2version with an actual commit
setenv =
    COMMIT_MSG = Test commit message
# dependencies needed for code quality checks
# you need to add here any additional dependencies you might need
deps =
    build
    twine
    docutils
    readme-renderer
    bump2version
skip_install = true
commands_pre = python {toxinidir}/devtools/clean_dist_check.py
commands =
    python --version
    python -m build
    twine check dist/*.whl
    twine check dist/*.tar.gz
    bump2version --dry-run --verbose --allow-dirty patch
    bump2version --dry-run --verbose --allow-dirty minor
    bump2version --dry-run --verbose --allow-dirty major
commands_post = python {toxinidir}/devtools/clean_dist_check.py

# code quality assessment. This is not a check in the CI, serves just
# as info for the developer
[testenv:radon]
deps = radon
skip_install = true
commands =
    radon cc -s --total-average --no-assert {posargs:src/}
    radon mi -m -s {posargs:src/}

# Simulate docs building as it will occur on ReadTheDocs
# if this fails, most likely RTD build will fail
[testenv:docs]
usedevelop = true
extras = docs
commands =
    sphinx-build {posargs:-E} -b html docs/rst dist/docs
    #sphinx-build -b linkcheck docs dist/docs

# safety checks
[testenv:safety]
deps = safety
skip_install = true
commands = safety check
